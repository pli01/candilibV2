// https://docs.cypress.io/api/introduction/api.html

// Used constants
const candilibAddress = 'http://localhost:8080/candilib/'
const aurigeFilePath = '../../../../server/dev-setup/aurige.test.json'
const planningFilePath = '../../../../server/dev-setup/planning-75.csv'
// The candidate should be validated in the aurige file
// The center should provide places on every time slots
// on the selected day and for the 2 inspectors
const inspecteur = 'DUPONT03DU75'
const inspecteur2 = 'DUPONT02DU75'
const candidat = 'CANDIDAT'
const centre = 'Noisy le Grand'
const placeDate = '2019-10-08'
const email = 'jean@dupont.fr' // Any correct (not already whitelisted) email
const emailCandidat = 'candidat@candilib.fr' // Any correct email

// The admin should have access to 93 and 75
const adminLogin = 'admin@example.com'
const adminPass = 'Admin*78'

// The magic link should be the one of the selected candidate
// const magicLink = 'http://localhost:8080/candilib/candidat?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkNmU3M2MwODk1ZDY4MzgwMjZkNjBjYSIsImlhdCI6MTU2ODIwODk5OCwiZXhwIjoxNTY4NDY4MTk4fQ.A4G2lF26cNvFMusx8510UcbEAkaqvfvYcFs3gPP12Cs'
var magicLink

describe('Tests the subscription', () => {
  xit('Adds the email to the whitelist', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Visits the whitelist
    cy.visit(candilibAddress + 'admin/whitelist')
    cy.get('h2')
      .should('contain', 'Liste blanche')
    // Adds the email
    cy.contains('Ajouter une adresse courriel')
      .click()
    cy.get('.t-add-one-whitelist [type=text]')
      .type(emailCandidat + '{enter}')
  })
  it('Fills the pre-sign-up form', () => {
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.contains('Se pré-inscrire')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    cy.contains('NEPH')
      .parent()
      .children('input')
      .type('0123456789')
    cy.contains('Nom de naissance')
      .parent()
      .children('input')
      .type(candidat)
    cy.contains('Prénom')
      .parent()
      .children('input')
      .type('Jean')
    cy.contains('Courriel *')
      .parent()
      .children('input')
      .type(emailCandidat)
    cy.contains('Portable')
      .parent()
      .children('input')
      .type('0716253443')
    cy.contains('Adresse')
      .parent()
      .children('input')
      .type('avenue')
    cy.get('.v-select-list')
      .contains('avenue')
      .click()
    cy.contains('Pré-inscription')
      .click()
    // Verifies the access
    cy.url()
      .should('contain', 'email-validation')
    cy.get('h3')
      .should('contain', 'Validation en attente')
    cy.get('div')
      .should('contain', 'Vous allez bientôt recevoir un courriel à l\'adresse que vous nous avez indiqué.')
    cy.contains('Retour au formulaire de pré-inscription')
      .click()
    // Try again, it shouldn't work
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.contains('Se pré-inscrire')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    cy.contains('NEPH')
      .parent()
      .children('input')
      .type('0123456789')
    cy.contains('Nom de naissance')
      .parent()
      .children('input')
      .type(candidat)
    cy.contains('Prénom')
      .parent()
      .children('input')
      .type('Jean')
    cy.contains('Courriel *')
      .parent()
      .children('input')
      .type(emailCandidat)
    cy.contains('Portable')
      .parent()
      .children('input')
      .type('0716253443')
    cy.contains('Adresse')
      .parent()
      .children('input')
      .type('avenue')
    cy.get('.v-select-list')
      .contains('avenue')
      .click()
    cy.contains('Pré-inscription')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Cette adresse courriel est déjà enregistrée')
  })

  it('Gets the confirmation email from mailHog', () => {
    cy.mhGetAllMails()
      .mhFirst()
      .mhGetBody().then((mailBody) => {
        const codedLink = mailBody.split('href=3D"')[1].split('">')[0]
        const withoutEq = codedLink.replace(/=\r\n/g, '')
        const validationLink = withoutEq.replace(/=3D/g, '=')
        cy.visit(validationLink)
      })
    cy.get('h3')
      .should('contain', 'Adresse courriel validée')
  })

  xit('Visits the candidate already sign-up form when awaiting validation', () => {
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.get('.t-already-signed-up-button-top')
      .should('contain', 'Déjà Inscrit ?')
      .click()
    cy.get('.t-magic-link-input-top [type=text]')
      .type(emailCandidat)
    cy.get('.t-magic-link-button-top')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Utilisateur en attente de validation.')
  })

  it('Validates the candidate via Aurige', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Goes to the page
    cy.contains('import_export')
      .click()
    // Verifies that there is nothing
    cy.get('.ag-overlay')
      .should('contain', 'No Rows To Show')
    // Uploads the JSON file
    const fileName = 'aurige.json'
    cy.fixture(aurigeFilePath).then(fileContent => {
      cy.get('.input-file-container [type=file]')
        .upload({
          fileContent: JSON.stringify(fileContent),
          fileName,
          mimeType: 'application/json',
        })
    })
    cy.get('.v-snack')
      .should('contain', 'aurige.json prêt à être synchronisé')
    cy.get('.import-file-action [type=button]')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Le fichier aurige.json a été synchronisé.')
    // Verifies that the candidate is present
    cy.get('.ag-cell')
      .should('contain', candidat)
  })
  it('Sends the magic link', () => {
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.get('.t-already-signed-up-button-top')
      .should('contain', 'Déjà Inscrit ?')
      .click()
    cy.get('.t-magic-link-input-top [type=text]')
      .type(emailCandidat)
    cy.get('.t-magic-link-button-top')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Un lien de connexion vous a été envoyé.')
  })
  it('Gets the candidate magic link', () => {
    cy.mhGetAllMails()
      .mhFirst()
      .mhGetBody().then((mailBody) => {
        const codedLink = mailBody.split('href=3D"')[1].split('">')[0]
        const withoutEq = codedLink.replace(/=\r\n/g, '')
        magicLink = withoutEq.replace(/=3D/g, '=')
      })
  })
})

describe('Candidate tests', () => {
  it('Visits the candidate already signed up form', () => {
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.get('.t-already-signed-up-button-top')
      .should('contain', 'Déjà Inscrit ?')
      .click()
    cy.get('.t-magic-link-input-top [type=text]')
      .type(email)
    cy.get('.t-magic-link-button-top')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Utilisateur non reconnu')
  })

  it('Tries to pre-signup with a not whitelisted address', () => {
    cy.visit(candilibAddress + 'qu-est-ce-que-candilib')
    cy.contains('Se pré-inscrire')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    cy.contains('NEPH')
      .parent()
      .children('input')
      .type('0123456789')
    cy.contains('Nom de naissance')
      .parent()
      .children('input')
      .type(candidat)
    cy.contains('Prénom')
      .parent()
      .children('input')
      .type('Jean')
    cy.contains('Courriel *')
      .parent()
      .children('input')
      .type('badtest@example.com')
    cy.contains('Portable')
      .parent()
      .children('input')
      .type('0716253443')
    cy.contains('Adresse')
      .parent()
      .children('input')
      .type('avenue')
    cy.get('.v-select-list')
      .contains('avenue')
      .click()
    cy.contains('Pré-inscription')
      .click()
    cy.get('.v-snack')
      .should('contain', 'L\'adresse courriel renseignée (badtest@example.com) n\'est pas dans la liste des invités.')
    // Goes to the 'Mentions Légales' page
    cy.contains('Mentions légales')
      .click()
    cy.url()
      .should('contain', 'mentions-legales')
    cy.get('h2')
      .should('contain', 'Mentions légales')
    cy.contains('exit_to_app')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    // Tests the display of the F.A.Q.
    cy.contains('Une question')
      .click()
    cy.url()
      .should('contain', 'faq')
    cy.get('h2')
      .should('contain', 'F.A.Q')
    cy.get('.question-content')
      .should('not.be.visible')
    cy.get('.question').contains('?')
      .click()
    cy.get('.question-content')
      .should('be.visible')
  })

  it('Tests the candidate front', () => {
    cy.visit(magicLink)
    // Tests the FAQ
    cy.contains('help_outline')
      .click()
    cy.url()
      .should('contain', 'faq')
    cy.get('h2')
      .should('contain', 'F.A.Q')
    cy.get('.question-content')
      .should('not.be.visible')
    cy.get('.question').contains('?')
      .click()
    cy.get('.question-content')
      .should('be.visible')
    // Tests the 'Mentions Légales' page
    cy.contains('account_balance')
      .click()
    cy.url()
      .should('contain', 'mentions-legales')
    cy.get('h2')
      .should('contain', 'Mentions légales')
    // Tests the profile page
    cy.contains('supervised_user_circle')
      .click()
    cy.url()
      .should('contain', 'mon-profil')
    cy.get('h2')
      .should('contain', 'Mon profil')
    cy.contains('Nom de naissance')
      .parent().parent()
      .should('contain', candidat)
    // Adds the reservation
    cy.contains('home')
      .click()
    cy.get('h2')
      .should('contain', 'Choix du centre')
    cy.contains(centre)
      .click()
    cy.get('.v-tabs .primary--text')
      .click()
    cy.contains(' ' + placeDate.split('-')[2] + ' ')
      .parents('.v-list__group')
      .within(($date) => {
        cy.root().click()
        cy.contains('08h00-08h30')
          .click()
      })
    cy.get('h2')
      .should('contain', 'Confirmation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('[type=checkbox]')
      .first().check({ force: true })
    cy.get('[type=checkbox]')
      .last().check({ force: true })
    cy.get('button')
      .contains('Confirmer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Votre réservation a bien été prise en compte')
    cy.get('h2')
      .should('contain', 'Ma réservation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('p')
      .should('contain', 'à 08:00')
    // Changes the reservation
    cy.contains('Modifier ma réservation')
      .click()
    cy.contains(centre)
      .click()
    cy.get('.v-tabs .primary--text')
      .click()
    cy.contains(' ' + placeDate.split('-')[2] + ' ')
      .parents('.v-list__group')
      .within(($date) => {
        cy.root().click()
        cy.contains('08h30-09h00')
          .click()
      })
    cy.get('h2')
      .should('contain', 'Confirmer la modification')
    cy.get('h3')
      .should('contain', centre)
    cy.get('[type=checkbox]')
      .first().check({ force: true })
    cy.get('[type=checkbox]')
      .last().check({ force: true })
    cy.get('button')
      .contains('Confirmer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Votre réservation a bien été prise en compte')
    cy.get('h2')
      .should('contain', 'Ma réservation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('p')
      .should('contain', 'à 08:30')
    // Cancels the reservation
    cy.contains('Annuler ma réservation')
      .click()
    cy.get('button')
      .contains('Confirmer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Votre annulation a bien été prise en compte.')
    cy.get('h2')
      .should('contain', 'Choix du centre')
    // Disconnects
    cy.contains('exit_to_app')
      .click()
    cy.url()
      .should('contain', 'candidat-presignup')
  })
})

describe('Admin tests', () => {
  it('Tries to login with invalid password', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass + 'bad')
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Identifiants invalides')
  })

  it('Tries to login with invalid email', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type('admin@example')
    cy.get('[type=password]')
      .type('password')
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Veuillez remplir le formulaire')
  })

  it('Logins with a restricted admin account', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type('admin93@example.com')
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    cy.get('.hexagon-wrapper')
      .should('not.contain', '75')
      .and('contain', '93')
    cy.get('h3')
      .should('contain', 'admin93')
    cy.get('.title')
      .should('contain', 'Bobigny')
    cy.get('.v-toolbar')
      .should('not.contain', 'import_export')
    cy.contains('calendar_today').click()
    cy.get('.v-tabs__div')
      .should('contain', 'Bobigny')
  })

  it('Tests Aurige import/export', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Goes to the page
    cy.contains('import_export')
      .click()
    // Verifies that there is nothing
    cy.get('.ag-overlay')
      .should('contain', 'No Rows To Show')
    // Uploads the JSON file
    const fileName = 'aurige.json'
    cy.fixture(aurigeFilePath).then(fileContent => {
      cy.get('.input-file-container [type=file]')
        .upload({
          fileContent: JSON.stringify(fileContent),
          fileName,
          mimeType: 'application/json',
        })
    })
    cy.get('.v-snack')
      .should('contain', 'aurige.json prêt à être synchronisé')
    cy.get('.import-file-action [type=button]')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Le fichier aurige.json a été synchronisé.')
    // Verifies that the candidate is present
    cy.get('.ag-cell')
      .should('contain', 'candidat')
  })

  it('Tests the import of csv files in the planning', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Goes to where the places are
    cy.visit(candilibAddress + 'admin/gestion-planning/0/' + placeDate)
    cy.get('.v-tabs')
      .contains(centre)
      .click({ force: true })
    // Removes the inspector's places
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1)
      .and('contain', inspecteur) // To ensure retry-ability
      .contains(inspecteur)
      .parents('tbody')
      .should('not.contain', 'block')
      .within(($row) => {
        // Removes the morning
        cy.contains('delete')
          .click()
        cy.contains('Supprimer la matinée')
          .click()
        cy.contains('Valider')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'La suppression des places sélectionnées a bien été effectuée')
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur2)
      .parents('tbody')
      .should('not.contain', 'block')
      .within(($row) => {
        // Removes the afternoon
        cy.contains('delete')
          .click()
        cy.contains('Supprimer l\'après-midi')
          .click()
        cy.contains('Valider')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'La suppression des places sélectionnées a bien été effectuée')
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur2)
      .parents('tr').within(($row) => {
        cy.get(':nth-child(9)')
          .should('contain', 'check_circle')
        cy.get(':nth-child(10)')
          .should('contain', 'block')
      })
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur)
      .parents('tr')
      .within(($row) => {
        cy.get(':nth-child(9)')
          .should('contain', 'block')
        cy.get(':nth-child(10)')
          .should('contain', 'check_circle')
        // Removes the entire day
        cy.contains('delete')
          .click()
        cy.root().parent()
          .contains('Supprimer la journée')
          .click()
        cy.root().parent()
          .contains('Valider')
          .click()
      })
    // The inspector should not be present anymore
    cy.get('.name-ipcsr-wrap')
      .should('not.contain', inspecteur)
    // Imports the places
    cy.get('.t-import-places [type=checkbox]')
      .check({ force: true })
    const fileName = 'planning.csv'
    cy.fixture(planningFilePath).then(fileContent => {
      cy.get('[type=file]').upload({ fileContent, fileName, mimeType: 'text/csv' })
    })
    cy.get('.v-snack')
      .should('contain', 'planning.csv prêt à être synchronisé')
    cy.get('.import-file-action [type=button]')
      .click({ force: true })
    cy.get('.v-snack', { timeout: 10000 })
      .should('contain', 'Le fichier planning.csv a été traité pour le departement 75.')
    // The inspector should be back
    cy.contains('replay')
      .click()
    cy.get('.name-ipcsr-wrap')
      .should('contain', inspecteur)
  })

  it('Searches for candidate, goes to the planning and disconnects', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    cy.get('h2')
      .should('contain', 'Tableau de bord')
    cy.get('h3')
      .should('contain', adminLogin.split('@')[0])
    // Searches for candidate
    cy.get('.t-search-candidat [type=text]')
      .type(candidat)
    cy.contains(candidat)
      .click()
    cy.get('h3')
      .should('contain', 'Informations candidats')
    cy.get('.t-result-candidat')
      .contains('Nom')
      .parent()
      .should('contain', candidat)
    // Searches for inspector
    cy.get('.t-search-inspecteur [type=text]')
      .type(inspecteur)
    cy.contains(inspecteur)
      .click()
    cy.get('h3')
      .should('contain', 'informations inspecteur')
    cy.get('.t-result-inspecteur')
      .contains('Nom')
      .parent()
      .should('contain', inspecteur)
    // Verifies the number of centers in 75 and 93
    cy.get('.layout.row.wrap').children()
      .should('have.length', 3)
    cy.get('.hexagon-wrapper').contains('93')
      .click()
    cy.get('.layout.row.wrap').children()
      .should('have.length', 4)
    cy.get('.hexagon-wrapper').contains('75')
      .click()
    // Goes to 07/10/2019 in the planning
    cy.get('h2.title')
      .should('contain', centre)
      .contains(centre)
      .parents('.monitor-wrapper').within(($centre) => {
        cy.contains('07 oct. 2019')
          .parents('tr').within(($row) => {
            cy.get('button').first()
              .within(($button) => {
                cy.get('.v-btn__content > :nth-child(3) > strong')
                  .invoke('text').as('placesDispo')
                cy.root().click()
              })
          })
      })
    cy.url()
      .should('contain', '2019-10-07')
    cy.get('.t-date-picker [type=text]').invoke('val')
      .should('contain', '07/10/2019')
    cy.get('.v-tabs__item--active')
      .should('contain', centre)
    // Verifies the number of places available
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1)
      .within(($window) => {
        cy.get('@placesDispo').then((placesDispo) => {
          cy.get('.place-button .v-icon:contains("check_circle")')
            .should('have.length', placesDispo)
        })
      })
    // Disconnects from the app
    cy.contains('exit_to_app')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes déconnecté·e')
    cy.url()
      .should('eq', candilibAddress + 'admin-login')
  })

  it('Adds and removes places', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Goes to planning
    cy.contains('calendar_today').click()
    // Checks the center in the 93
    cy.get('.hexagon-wrapper').contains('93')
      .click()
    cy.get('.v-tabs__div')
      .should('contain', 'Bobigny')
    // Checks if the url matches the date displayed
    cy.get('.t-btn-next-week')
      .click()
    cy.url()
      .then(($url) => {
        let url = $url.split('/')
        let date = url[url.length - 1]
        let ymd = date.split('-')
        cy.get('.t-date-picker [type=text]').invoke('val')
          .should('contain', ymd[2] + '/' + ymd[1] + '/' + ymd[0])
      })
    // Goes to another date and checks the url
    cy.visit(candilibAddress + 'admin/gestion-planning/0/' + placeDate)
    cy.get('.hexagon-wrapper').contains('75')
      .click()
    cy.url()
      .then(($url) => {
        let url = $url.split('/')
        let date = url[url.length - 1]
        let ymd = date.split('-')
        cy.get('.t-date-picker [type=text]').invoke('val')
          .should('contain', ymd[2] + '/' + ymd[1] + '/' + ymd[0])
      })
    // Deletes the first place
    cy.get('.v-tabs')
      .contains(centre)
      .click({ force: true })
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1, { timeout: 10000 })
      .and('contain', inspecteur) // To ensure retry-ability
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('check_circle')
          .click()
        cy.contains('Rendre indisponible')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'a bien été supprimée de la base')
    // Add the first place
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('block')
          .click()
        cy.contains('Rendre le créneau disponible')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'a bien été crée')
    // Add candidate to the first place
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('check_circle')
          .click()
        cy.contains('Affecter un candidat')
          .click()
        cy.get('.search-input [type=text]')
          .type(candidat)
        cy.root().parents().contains(candidat)
          .click()
        cy.get('.place-details')
          .should('contain', centre)
        cy.contains('Valider')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', candidat)
      .and('contain', 'a bien été affecté à la place')
    // Change the inspector
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('face')
          .click()
        cy.contains('Modifier l\'inspecteur')
          .click()
        cy.get('[type=text]')
          .type(inspecteur2 + '{enter}')
        cy.root()
          .should('contain', 'Vous avez choisi l\'inspecteur ' + inspecteur2)
        cy.get('button')
          .contains('Valider')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'La modification est confirmée.')
    // Add the place back
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('block')
          .click()
        cy.contains('Rendre le créneau disponible')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'a bien été crée')
    // Removes the candidate from the place
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur2)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('face')
          .click()
        cy.contains('Annuler réservation')
          .click()
        cy.contains('Supprimer réservation')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'La réservation choisie a été annulée.')
    // Add the place back
    cy.get('.v-window-item').not('[style="display: none;"]')
      .contains(inspecteur2)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('block')
          .click()
        cy.contains('Rendre le créneau disponible')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'a bien été crée.')
  })

  it('Adds and removes from the whitelist', () => {
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Visits the whitelist
    cy.visit(candilibAddress + 'admin/whitelist')
    cy.get('h2')
      .should('contain', 'Liste blanche')
    // Adds the email
    cy.contains('Ajouter une adresse courriel')
      .click()
    cy.get('.t-add-one-whitelist [type=text]')
      .type(email + '{enter}')
    cy.get('.v-snack')
      .should('contain', email + ' ajouté à la liste blanche')
    // Tries to add bad addresses
    cy.contains('Ajouter un lot d\'adresse courriel')
      .click()
    cy.get('#whitelist-batch-textarea')
      .type('test.com\ntest@.com\n@test.com\ntest@test\ntest@test.t\n')
    cy.contains('Enregistrer ces adresses')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Aucun email n\'a pu être ajouté à la liste blanche')
    cy.get('.t-whitelist-batch-result')
      .should('contain', 'Adresse invalide')
      .and('not.contain', 'Adresse courriel existante')
      .and('not.contain', 'Adresse enregistrée')
    // Add some addresses
    cy.contains('Ajouter un lot d\'adresse courriel')
      .click()
    cy.get('#whitelist-batch-textarea')
      .type('test@example.com\n' + email)
    cy.contains('Enregistrer ces adresses')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Certains emails n\'ont pas pu être ajoutés à la liste blanche')
    cy.get('.t-whitelist-batch-result')
      .should('contain', 'Adresse enregistrée')
      .and('contain', 'Adresse courriel existante')
      .and('not.contain', 'Adresse invalide')
    // Searches for the email
    cy.get('.search-input [type=text]')
      .type(email)
    cy.get('.v-select-list').contains(email)
      .click()
    cy.get('h4')
      .should('contain', 'Adresses correspondant à la recherche (max 5)')
    // Test for dblclick (not functionning)
    /*
    cy.get('.t-whitelist-search')
      .contains(email)
      .dblclick()
    cy.get('.v-snack')
      .should('contain', 'L\'email '+email+' a été copié dans le presse-papier')
    */
    // Deletes the email
    cy.get('.t-whitelist-search')
      .contains(email)
      .parents('.t-whitelist-search')
      .contains('delete')
      .click()
    cy.get('.v-dialog')
      .should('contain', 'Voulez-vous vraiment supprimer l\'adresse ' + email + ' de la whitelist ?')
    cy.contains('Oui, supprimer')
      .click()
    cy.get('.v-snack')
      .should('contain', email + ' supprimé de la liste blanche')
      .contains('close')
      .click()
    // Deletes test@example.com
    cy.get('.whitelist-grid')
      .contains('test@example.com')
      .parents('[role="listitem"]')
      .should('contain', 'test@example.com')
      .contains('delete')
      .click()
    cy.get('.v-dialog')
      .should('contain', 'Voulez-vous vraiment supprimer l\'adresse test@example.com de la whitelist ?')
    cy.contains('Oui, supprimer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'test@example.com supprimé de la liste blanche')
  })
})

describe('Admin & Candidate tests', () => {
  it('The candidate chooses a place and the admin cancels it', () => {
    cy.visit(magicLink)
    // Adds the reservation
    cy.get('h2')
      .should('contain', 'Choix du centre')
    cy.contains(centre)
      .click()
    cy.get('.v-tabs .primary--text')
      .click()
    cy.contains(' ' + placeDate.split('-')[2] + ' ')
      .parents('.v-list__group')
      .within(($date) => {
        cy.root().click()
        cy.contains('08h00-08h30')
          .click()
      })
    cy.get('h2')
      .should('contain', 'Confirmation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('[type=checkbox]')
      .first().check({ force: true })
    cy.get('[type=checkbox]')
      .last().check({ force: true })
    cy.get('button')
      .contains('Confirmer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Votre réservation a bien été prise en compte')
    cy.get('h2')
      .should('contain', 'Ma réservation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('p')
      .should('contain', 'à 08:00')
    // Check candidate profile
    cy.contains('supervised_user_circle')
      .click()
    cy.contains('Nom de naissance')
      .parent().parent()
      .should('contain', candidat)
    // The admin connects
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // The admin find the reservation and cancels it
    cy.visit(candilibAddress + 'admin/gestion-planning/0/' + placeDate)
    cy.get('.v-tabs')
      .contains(centre)
      .click({ force: true })
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1)
      .and('contain', inspecteur) // To ensure retry-ability
      .within(($centre) => {
        cy.get('.place-button')
          .contains('face')
          .click()
        cy.get('.place-details')
          .should('contain', candidat)
        cy.contains('Annuler réservation')
          .click()
        cy.contains('Supprimer réservation')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'La réservation choisie a été annulée.')
    // Add the place back
    cy.get('.v-window-item').not('[style="display: none;"]')
      .within(($centre) => {
        cy.get('.place-button')
          .contains('block')
          .click()
        cy.contains('Rendre le créneau disponible')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', 'a bien été crée.')
    // The candidate doesn't have the reservation anymore
    cy.visit(magicLink)
    cy.get('h2')
      .should('contain', 'Choix du centre')
    // Check candidate profile
    cy.contains('supervised_user_circle')
      .click()
    cy.contains('Nom de naissance')
      .parent().parent()
      .should('contain', candidat)
  })

  it('The admin assigns a candidate and the candidate cancels it', () => {
    // Check the candidate
    cy.visit(magicLink)
    cy.get('h2')
      .should('contain', 'Choix du centre')
    cy.contains('supervised_user_circle')
      .click()
    cy.contains('Nom de naissance')
      .parent().parent()
      .should('contain', candidat)
    // The admin assigns the candidate to a place
    cy.visit(candilibAddress + 'admin-login')
    cy.get('[type=text]')
      .type(adminLogin)
    cy.get('[type=password]')
      .type(adminPass)
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Goes to planning
    cy.visit(candilibAddress + 'admin/gestion-planning/0/' + placeDate)
    cy.get('.v-tabs')
      .contains(centre)
      .click({ force: true })
    // Add candidate to the first place
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1)
      .and('contain', inspecteur) // To ensure retry-ability
      .contains(inspecteur)
      .parents('tbody').within(($row) => {
        cy.get('.place-button')
          .contains('check_circle')
          .click()
        cy.contains('Affecter un candidat')
          .click()
        cy.get('.search-input [type=text]')
          .type(candidat)
        cy.root().parents().contains(candidat)
          .click()
        cy.get('.place-details')
          .should('contain', centre)
        cy.contains('Valider')
          .click()
      })
    cy.get('.v-snack')
      .should('contain', candidat)
      .and('contain', 'a bien été affecté à la place')
    // The candidate cancels the place
    cy.visit(magicLink)
    cy.get('h2')
      .should('contain', 'Ma réservation')
    cy.get('h3')
      .should('contain', centre)
    cy.get('p')
      .should('contain', 'à 08:00')
    cy.contains('Annuler ma réservation')
      .click()
    cy.get('button')
      .contains('Confirmer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Votre annulation a bien été prise en compte.')
    cy.get('h2')
      .should('contain', 'Choix du centre')
    // The admin verifies that the reservation has been cancelled
    cy.visit(candilibAddress + 'admin/gestion-planning/0/' + placeDate)
    cy.get('.v-tabs')
      .contains(centre)
      .click({ force: true })
    cy.get('.v-window-item').not('[style="display: none;"]')
      .should('have.length', 1)
      .and('contain', inspecteur) // To ensure retry-ability
      .contains(inspecteur)
      .parents('tbody')
      .find('.place-button')
      .should('not.contain', 'face')
  })
})
