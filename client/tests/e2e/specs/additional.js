describe('Additional tests', () => {
  it('Adds and removes from the whitelist', () => {
    cy.visit(Cypress.env('candilibAddress') + 'admin-login')
    cy.get('[type=text]')
      .type(Cypress.env('adminLogin'))
    cy.get('[type=password]')
      .type(Cypress.env('adminPass'))
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    // Visits the whitelist
    cy.visit(Cypress.env('candilibAddress') + 'admin/whitelist')
    cy.get('h2')
      .should('contain', 'Liste blanche')
    // Adds the email
    cy.contains('Ajouter une adresse courriel')
      .click()
    cy.get('.t-add-one-whitelist [type=text]')
      .type(Cypress.env('email') + '{enter}')
    cy.get('.v-snack')
      .should('contain', Cypress.env('email') + ' ajouté à la liste blanche')
    // Tries to add bad addresses
    cy.contains('Ajouter un lot d\'adresse courriel')
      .click()
    cy.get('#whitelist-batch-textarea')
      .type('test.com\ntest@.com\n@test.com\ntest@test\ntest@test.t\n')
    cy.contains('Enregistrer ces adresses')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Aucun email n\'a pu être ajouté à la liste blanche')
    cy.get('.t-whitelist-batch-result')
      .should('contain', 'Adresse invalide')
      .and('not.contain', 'Adresse courriel existante')
      .and('not.contain', 'Adresse enregistrée')
    // Add some addresses
    cy.contains('Ajouter un lot d\'adresse courriel')
      .click()
    cy.get('#whitelist-batch-textarea')
      .type('test@example.com\n' + Cypress.env('email'))
    cy.contains('Enregistrer ces adresses')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Certains emails n\'ont pas pu être ajoutés à la liste blanche')
    cy.get('.t-whitelist-batch-result')
      .should('contain', 'Adresse enregistrée')
      .and('contain', 'Adresse courriel existante')
      .and('not.contain', 'Adresse invalide')
    // Searches for the email
    cy.get('.search-input [type=text]')
      .type(Cypress.env('email'))
    cy.get('h4')
      .should('contain', 'Adresses correspondant à la recherche (max 5)')
    // Deletes the email
    cy.get('.t-whitelist-search')
      .contains(Cypress.env('email'))
      .parents('.t-whitelist-search')
      .contains('delete')
      .click()
    cy.get('.v-dialog')
      .should('contain', 'Voulez-vous vraiment supprimer l\'adresse ' + Cypress.env('email') + ' de la whitelist ?')
    cy.contains('Oui, supprimer')
      .click()
    cy.get('.v-snack')
      .should('contain', Cypress.env('email') + ' supprimé de la liste blanche')
      .contains('close')
      .click()
    // Deletes test@example.com
    cy.get('.whitelist-grid')
      .contains('test@example.com')
      .parents('[role="listitem"]')
      .should('contain', 'test@example.com')
      .contains('delete')
      .click()
    cy.get('.v-dialog')
      .should('contain', 'Voulez-vous vraiment supprimer l\'adresse test@example.com de la whitelist ?')
    cy.contains('Oui, supprimer')
      .click()
    cy.get('.v-snack')
      .should('contain', 'test@example.com supprimé de la liste blanche')
  })

  it('Logins with a restricted admin account', () => {
    cy.visit(Cypress.env('candilibAddress') + 'admin-login')
    cy.get('[type=text]')
      .type(Cypress.env('admin93Login'))
    cy.get('[type=password]')
      .type(Cypress.env('admin93Pass'))
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Vous êtes identifié')
    cy.get('.hexagon-wrapper')
      .should('not.contain', '75')
      .and('contain', '93')
    cy.get('h3')
      .should('contain', 'admin93')
    cy.get('.title')
      .should('contain', 'Bobigny')
    cy.get('.v-toolbar')
      .should('not.contain', 'import_export')
    cy.contains('calendar_today').click()
    cy.get('.v-tabs__div')
      .should('contain', 'Bobigny')
  })

  it('Tries the admin login with an invalid password', () => {
    cy.visit(Cypress.env('candilibAddress') + 'admin-login')
    cy.get('[type=text]')
      .type(Cypress.env('adminLogin'))
    cy.get('[type=password]')
      .type(Cypress.env('adminPass') + 'bad')
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Identifiants invalides')
  })

  it('Tries the admin login with an invalid email', () => {
    cy.visit(Cypress.env('candilibAddress') + 'admin-login')
    cy.get('[type=text]')
      .type('admin@example')
    cy.get('[type=password]')
      .type('password')
    cy.get('.submit-btn')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Veuillez remplir le formulaire')
  })

  it('Tries the already signed up form without account', () => {
    cy.visit(Cypress.env('candilibAddress') + 'qu-est-ce-que-candilib')
    cy.get('.t-already-signed-up-button-top')
      .should('contain', 'Déjà Inscrit ?')
      .click()
    cy.get('.t-magic-link-input-top [type=text]')
      .type(Cypress.env('email'))
    cy.get('.t-magic-link-button-top')
      .click()
    cy.get('.v-snack')
      .should('contain', 'Utilisateur non reconnu')
  })

  it('Tries to pre-signup with a not whitelisted address', () => {
    cy.visit(Cypress.env('candilibAddress') + 'qu-est-ce-que-candilib')
    cy.contains('Se pré-inscrire')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    cy.contains('NEPH')
      .parent()
      .children('input')
      .type(Cypress.env('NEPH'))
    cy.contains('Nom de naissance')
      .parent()
      .children('input')
      .type(Cypress.env('candidat'))
    cy.contains('Prénom')
      .parent()
      .children('input')
      .type(Cypress.env('firstName'))
    cy.contains('Courriel *')
      .parent()
      .children('input')
      .type('badtest@example.com')
    cy.contains('Portable')
      .parent()
      .children('input')
      .type('0716253443')
    cy.contains('Adresse')
      .parent()
      .children('input')
      .type('avenue')
    cy.get('.v-select-list')
      .contains('avenue')
      .click()
    cy.contains('Pré-inscription')
      .click()
    cy.get('.v-snack')
      .should('contain', 'L\'adresse courriel renseignée (badtest@example.com) n\'est pas dans la liste des invités.')
    // Goes to the 'Mentions Légales' page
    cy.contains('Mentions légales')
      .click()
    cy.url()
      .should('contain', 'mentions-legales')
    cy.get('h2')
      .should('contain', 'Mentions légales')
    cy.contains('exit_to_app')
      .click()
    cy.get('h2')
      .should('contain', 'Réservez votre place d\'examen')
    // Tests the display of the F.A.Q.
    cy.contains('Une question')
      .click()
    cy.url()
      .should('contain', 'faq')
    cy.get('h2')
      .should('contain', 'F.A.Q')
    cy.get('.question-content')
      .should('not.be.visible')
    cy.get('.question').contains('?')
      .click()
    cy.get('.question-content')
      .should('be.visible')
  })
})
